# Lerian MCP Memory Server - Unified Docker Compose
# Simplified configuration with multiple profiles for different environments
#
# Usage:
#   Development:  docker-compose --profile dev up
#   Production:   docker-compose --profile prod up
#
# Configuration:
#   - Copy .env.example to .env and configure as needed
#   - All variables from .env are automatically passed to containers via env_file
#   - Additional environment variables below provide container-specific overrides and defaults
#   - API keys (OPENAI_API_KEY, CLAUDE_API_KEY, etc.) are passed through automatically

services:
  # PostgreSQL Database - Core relational database
  postgres:
    image: postgres:latest
    container_name: lerian-mcp-memory-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME:-lerian_mcp_memory}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-postgres.sql:/docker-entrypoint-initdb.d/init-postgres.sql:ro
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-lerian_mcp_memory}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - lerian_network
    profiles: ["dev", "prod"]

  # Qdrant Vector Database - Core service for all profiles
  qdrant:
    image: qdrant/qdrant:latest
    container_name: lerian-mcp-memory-qdrant
    restart: unless-stopped
    ports:
      - "${QDRANT_HOST_PORT:-6333}:6333" # HTTP API
      - "${QDRANT_GRPC_PORT:-6334}:6334" # gRPC API
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__STORAGE__STORAGE_PATH=/qdrant/storage
      - QDRANT__CLUSTER__ENABLED=false
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - lerian_network
    profiles: ["dev", "prod"]

  # Lerian MCP Memory Server - Production version
  lerian-mcp-memory:
    build:
      context: .
      dockerfile: Dockerfile
      target: dev
      args:
        - VERSION=${VERSION:-dev}
        - BUILD_TIME=${BUILD_TIME:-dev}
        - COMMIT_HASH=${COMMIT_HASH:-dev}
    image: lerian-mcp-memory:dev
    container_name: lerian-mcp-memory-server
    restart: unless-stopped
    depends_on:
      - postgres
      - qdrant
    ports:
      - "${MCP_HOST_PORT:-9080}:9080" # MCP API port
      - "${MCP_HEALTH_PORT:-9081}:8081" # Health check port
      - "${MCP_METRICS_PORT:-9082}:8082" # Metrics port (optional)
    env_file:
      - .env
    environment:
      # Container networking overrides
      - MCP_MEMORY_QDRANT_HOST=qdrant
      - MCP_MEMORY_QDRANT_PORT=6334
      # Database connection overrides
      - DB_HOST=postgres
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@postgres:5432/${DB_NAME:-lerian_mcp_memory}?sslmode=disable
      - MCP_MEMORY_DATA_DIR=/app/data
      - MCP_MEMORY_CONFIG_DIR=/app/config
      - MCP_MEMORY_HTTP_PORT=9080
      - MCP_MEMORY_HEALTH_PORT=8081
      - MCP_MEMORY_METRICS_PORT=8082
      # Use environment variables from .env file with defaults
      - MCP_MEMORY_LOG_LEVEL=${MCP_MEMORY_LOG_LEVEL:-info}
      - MCP_MEMORY_HOST=${MCP_MEMORY_HOST:-0.0.0.0}
      - MCP_MEMORY_CORS_ENABLED=${MCP_MEMORY_CORS_ENABLED:-true}
      - MCP_MEMORY_CORS_ORIGINS=${MCP_MEMORY_CORS_ORIGINS:-http://localhost:*,https://localhost:*}
      - MCP_MEMORY_ENCRYPTION_ENABLED=${MCP_MEMORY_ENCRYPTION_ENABLED:-true}
      - MCP_MEMORY_BACKUP_ENABLED=${MCP_MEMORY_BACKUP_ENABLED:-true}
      - MCP_MEMORY_EMBEDDING_DIMENSION=${MCP_MEMORY_EMBEDDING_DIMENSION:-1536}
      - QDRANT_COLLECTION=${QDRANT_COLLECTION:-claude_memory}
      - RETENTION_DAYS=${RETENTION_DAYS:-90}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      # AI provider configuration
      - AI_PROVIDER=${AI_PROVIDER:-openai}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4o}
      # Protocol support
      - MCP_STDIO_ENABLED=${MCP_STDIO_ENABLED:-true}
      - MCP_HTTP_ENABLED=${MCP_HTTP_ENABLED:-true}
      - MCP_WS_ENABLED=${MCP_WS_ENABLED:-true}
      - MCP_SSE_ENABLED=${MCP_SSE_ENABLED:-true}
      # Database configuration
      - MCP_MEMORY_STORAGE_PROVIDER=${MCP_MEMORY_STORAGE_PROVIDER:-qdrant}
      - MCP_MEMORY_DB_TYPE=${MCP_MEMORY_DB_TYPE:-sqlite}
      - SQLITE_DB_PATH=${SQLITE_DB_PATH:-/app/data/memory.db}
      # Performance settings
      - MCP_MEMORY_MAX_CONNECTIONS=${MCP_MEMORY_MAX_CONNECTIONS:-10}
      - MCP_MEMORY_CONNECTION_TIMEOUT_SECONDS=${MCP_MEMORY_CONNECTION_TIMEOUT_SECONDS:-30}
      - MCP_MEMORY_QUERY_TIMEOUT_SECONDS=${MCP_MEMORY_QUERY_TIMEOUT_SECONDS:-60}
    volumes:
      - mcp_data:/app/data
      - mcp_logs:/app/logs
      - mcp_backups:/app/backups
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-3}
      start_period: 40s
    networks:
      - lerian_network
    profiles: ["prod"]

  # Lerian MCP Memory Server - Development version with hot reload
  lerian-mcp-memory-server:
    build:
      context: .
      dockerfile: Dockerfile
      target: dev
      args:
        - VERSION=${VERSION:-dev}
        - BUILD_TIME=${BUILD_TIME:-dev}
        - COMMIT_HASH=${COMMIT_HASH:-dev}
    image: lerian-mcp-memory:dev
    container_name: lerian-mcp-memory-server
    restart: unless-stopped
    depends_on:
      - postgres
      - qdrant
    ports:
      - "${MCP_HOST_PORT:-9080}:9080"
      - "${MCP_HEALTH_PORT:-9081}:8081"
      - "${MCP_METRICS_PORT:-9082}:8082"
    env_file:
      - .env
    environment:
      # Development-specific overrides
      - MCP_MEMORY_QDRANT_HOST=qdrant
      - MCP_MEMORY_QDRANT_PORT=6334
      # Database connection overrides
      - DB_HOST=postgres
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@postgres:5432/${DB_NAME:-lerian_mcp_memory}?sslmode=disable
      - MCP_MEMORY_DATA_DIR=/app/data
      - MCP_MEMORY_CONFIG_DIR=/app/config
      - MCP_MEMORY_LOG_LEVEL=debug
      - MCP_MEMORY_DEV_MODE=true
      - CGO_ENABLED=0
      - GOOS=linux
      # Use environment variables from .env file with dev overrides
      - MCP_MEMORY_HOST=${MCP_MEMORY_HOST:-0.0.0.0}
      - MCP_MEMORY_CORS_ENABLED=${MCP_MEMORY_CORS_ENABLED:-true}
      - MCP_MEMORY_CORS_ORIGINS=${MCP_MEMORY_CORS_ORIGINS:-*}
      - MCP_MEMORY_ENCRYPTION_ENABLED=${MCP_MEMORY_ENCRYPTION_ENABLED:-false}
      - MCP_MEMORY_BACKUP_ENABLED=${MCP_MEMORY_BACKUP_ENABLED:-false}
      - MCP_MEMORY_EMBEDDING_DIMENSION=${MCP_MEMORY_EMBEDDING_DIMENSION:-1536}
      - QDRANT_COLLECTION=${QDRANT_COLLECTION:-claude_memory}
      - RETENTION_DAYS=${RETENTION_DAYS:-90}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      # AI provider configuration
      - AI_PROVIDER=${AI_PROVIDER:-openai}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4o}
      # Protocol support
      - MCP_STDIO_ENABLED=${MCP_STDIO_ENABLED:-true}
      - MCP_HTTP_ENABLED=${MCP_HTTP_ENABLED:-true}
      - MCP_WS_ENABLED=${MCP_WS_ENABLED:-true}
      - MCP_SSE_ENABLED=${MCP_SSE_ENABLED:-true}
      # Database configuration
      - MCP_MEMORY_STORAGE_PROVIDER=${MCP_MEMORY_STORAGE_PROVIDER:-qdrant}
      - MCP_MEMORY_DB_TYPE=${MCP_MEMORY_DB_TYPE:-sqlite}
      - SQLITE_DB_PATH=${SQLITE_DB_PATH:-/app/data/memory.db}
      # Performance settings
      - MCP_MEMORY_MAX_CONNECTIONS=${MCP_MEMORY_MAX_CONNECTIONS:-10}
      - MCP_MEMORY_CONNECTION_TIMEOUT_SECONDS=${MCP_MEMORY_CONNECTION_TIMEOUT_SECONDS:-30}
      - MCP_MEMORY_QUERY_TIMEOUT_SECONDS=${MCP_MEMORY_QUERY_TIMEOUT_SECONDS:-60}
    volumes:
      # Mount source code for hot reload
      - ./cmd:/app/cmd:ro
      - ./internal:/app/internal:ro
      - ./pkg:/app/pkg:ro
      - ./go.mod:/app/go.mod:ro
      - ./go.sum:/app/go.sum:ro
      # Persistent data volumes
      - mcp_data:/app/data
      - mcp_logs:/app/logs
      - mcp_backups:/app/backups
    command: ["air", "-c", ".air.toml"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-3}
      start_period: 40s
    networks:
      - lerian_network
    dns:
      - 8.8.8.8
      - 8.8.4.4
    profiles: ["dev"]

# Networks
networks:
  lerian_network:
    driver: bridge

# Volumes - CRITICAL: These contain all your memory data. NEVER DELETE!
volumes:
  # CRITICAL: PostgreSQL database - Contains all relational data
  postgres_data:
    driver: local
    name: mcp_memory_postgres_db_NEVER_DELETE

  # CRITICAL: Qdrant vector database - Contains all embeddings and search indices
  qdrant_data:
    driver: local
    name: mcp_memory_qdrant_vector_db_NEVER_DELETE

  # CRITICAL: MCP server data - Contains SQLite database and app data
  mcp_data:
    driver: local
    name: mcp_memory_app_data_NEVER_DELETE

  # Application logs - Safe to recreate but useful for debugging
  mcp_logs:
    driver: local
    name: mcp_memory_logs

  # Backup storage - Contains automated backups of your data
  mcp_backups:
    driver: local
    name: mcp_memory_backups
